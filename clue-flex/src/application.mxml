<?xml version="1.0" encoding="UTF-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:clue-components="clue.components.*" width="100%" height="100%"
	creationComplete="initApp();">
	<s:states>
		<s:State name="login" />
		<s:State name="games" />
		<s:State name="prestart" stateGroups="clueGroup" />
		<s:State name="clue" stateGroups="clueGroup" />
		<s:State name="accuse" stateGroups="clueGroup,proposition" />
		<s:State name="suggest" stateGroups="clueGroup,proposition" />
		<s:State name="disprove" stateGroups="clueGroup" />
	</s:states>
	<s:transitions>
		<s:Transition fromState="*" toState="*">
			<s:Parallel>
				<s:Resize targets="{[beforeStartRect]}" duration="1000" />
				<s:Move
					targets="{[beforeStartRect,beforeStartRectContainer,beforeStartContainer]}"
					duration="1000" />
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	<fx:Script>
	<![CDATA[
		import mx.rpc.remoting.mxml.RemoteObject;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.messaging.events.MessageFaultEvent;
		import mx.messaging.events.MessageEvent;
		import mx.utils.*;
		import messages.*;
		import clue.components.*;
		import clue.events.*;
		import clue.*;
	
		private var key:String;
		private var username:String;
		private var suspect:String;
		private var gameId:int;
		private const allCards:Array=["DAGGER", "CANDLESTICK", "REVOLVER", "ROPE", "LEAD_PIPE", "SPANNER", "SCARLETT", "MUSTARD", "WHITE", "GREEN", "PEACOCK", "PLUM", "KITCHEN", "BALLROOM", "CONSERVATORY", "DINING_ROOM", "BILLIARD_ROOM", "LIBRARY", "LOUNGE", "HALL", "STUDY"];
		[Bindable]private var roomCards:ArrayCollection;
		[Bindable]private var suspectCards:ArrayCollection;
		[Bindable]private var weaponCards:ArrayCollection;
		[Bindable]private var playerCount:int=0;
		
		[Bindable]private var currentPlayers:ObjectProxy=new ObjectProxy({
		KITCHEN:new ArrayCollection(),
		BALLROOM:new ArrayCollection(),
		CONSERVATORY:new ArrayCollection(),
		DINING_ROOM:new ArrayCollection(),
		BILLIARD_ROOM:new ArrayCollection(),
		LIBRARY:new ArrayCollection(),
		LOUNGE:new ArrayCollection(),
		HALL:new ArrayCollection(),
		STUDY:new ArrayCollection()});
		[ArrayElementType("String")] [Bindable]private var myCardNames:ArrayCollection;
		//Handlers
		private function defaultServiceResultHandler(event:ResultEvent):void{}
		private function defaultServiceFaultHandler(event:FaultEvent):void{}
		private function defaultMessageFaultHandler(event:MessageFaultEvent):void{}
		
		private function logout():void{key=null;username=null;currentState="login";playerCount=0;chat.text=chatInput.text="";clueConsumer.unsubscribe();}
		private function successfulLogin(usernamein:String, keyin:String):void{username=usernamein;key=keyin;currentState="games";}
		private function join(suspectin:String,gameIdIn:int):void{gameId=gameIdIn;suspect=suspectin;blazeDSClueService.join(key,gameId,suspect);}
		private function rejoin(gameIdIn:int):void{gameId=gameIdIn;blazeDSClueService.associate(key,gameIdIn);}
		private function rejoinSuccess(event:ResultEvent):void{suspect=event.result as String;joinSuccess(event);}
		private function joinSuccess(event:ResultEvent):void{
			currentState="prestart";
			clueConsumer.subscribe();
			blazeDSClueService.getStatus(gameId);
		}
		private function onGetStatus(event:ResultEvent):void{
			var gameData:GameData = event.result as GameData;
			playerCount+=gameData.players.length;
			for (var s:String in currentPlayers)currentPlayers[s]=new ArrayCollection();
			for each (var p:Player in gameData.players) {
				p.setStyle("skinClass",PlayerSkin);
				currentPlayers[Board.getSuspectStartingRoom(p.suspect)].addItem(p);
			}
		}
		private function onStartGameResult(event:ResultEvent):void{currentState="clue";}
		
		private function onClueMessage(event:MessageEvent):void{
			chat.text+=event.message+"\n";
			if (event.message.body is messages.Join)onJoinMessage(event.message.body as Join);
			else if (event.message.body is messages.Chat){chat.text+="was a chat.\n";}
			else if (event.message.body is messages.CardsMessage){onCardsMessage(event.message.body as CardsMessage);}
			else if (event.message.body is messages.Disprove){onDisproveMessage(event.message.body as Disprove);}
			else if (event.message.body is messages.NextTurn)onNextTurnMessage(event.message.body as NextTurn);
		}
		private function onJoinMessage(join:Join):void{
			playerCount+=1;
			var p:Player=new Player(join.player,join.suspect);
			p.setStyle("skinClass",PlayerSkin);
			currentPlayers[Board.getSuspectStartingRoom(p.suspect)].addItem(p);
		}
		private function onDisproveMessage(disprove:Disprove):void{if(disprove.player==username)cardSidebar.isDisproving=true;}
		private function onDisprove(event:DisproveEvent):void{blazeDSClueService.disprove(key,gameId,event.card);}
		private function onDisproveSuccess(event:ResultEvent):void{cardSidebar.isDisproving=false;}
			
		private function onCardsMessage(cards:CardsMessage):void{
			myCardNames=new ArrayCollection(cards.cards);
			currentState="clue";
		}
		private function initApp():void{
			roomCards=new ArrayCollection(allCards);
			suspectCards=new ArrayCollection(allCards);
			weaponCards=new ArrayCollection(allCards);
			roomCards.filterFunction=Proposition.isRoom;
			suspectCards.filterFunction=Proposition.isSuspect;
			weaponCards.filterFunction=Proposition.isWeapon;
			roomCards.refresh();
			suspectCards.refresh();
			weaponCards.refresh();
			ExternalInterface.addCallback("successfulLogin",successfulLogin);
			ExternalInterface.addCallback("logout",logout);
			ExternalInterface.addCallback("join",join);
			ExternalInterface.addCallback("rejoin",rejoin);
			ExternalInterface.call("clueFinishedLoading");
		}
		private function onMakeProposition(event:PropositionMadeEvent):void{
			if (currentState=="suggest")blazeDSClueService.suggest(proposition.suspect,proposition.weapon);
			else if (currentState=="accuse")blazeDSClueService.accuse(proposition.room,proposition.suspect,proposition.weapon);
		}
		private function onProposeSuccess(event:ResultEvent):void{
			if(currentState=="suggest")btnSuggest.enabled=false;
			else if(currentState=="accuse")btnAccuse.enabled=false;
			currentState="clue";
		}
		private function onCancelProposition(event:Event):void{
			currentState="clue";
		}
		private function onEndTurn(event:ResultEvent):void{btnSuggest.enabled=btnAccuse.enabled=btnEndTurn.enabled=false;}
		private function onNextTurnMessage(nextTurn:NextTurn):void{if(nextTurn.player==this.username)btnSuggest.enabled=btnAccuse.enabled=btnEndTurn.enabled=true;}
	]]>
	</fx:Script>
	<fx:Declarations>
		<mx:RemoteObject id="blazeDSClueService" destination="BlazeDSClueService"
			result="defaultServiceResultHandler(event);" fault="defaultServiceFaultHandler(event);">
			<mx:method name="join" result="joinSuccess(event);" />
			<mx:method name="associate" result="rejoinSuccess(event);" />
			<mx:method name="getStatus" result="onGetStatus(event);" />
			<mx:method name="startGame" result="onStartGameResult(event);" />
			<mx:method name="suggest" result="onProposeSuccess(event);" />
			<mx:method name="accuse" result="onProposeSuccess(event);" />
			<mx:method name="endTurn" result="onEndTurn(event);" />
			<mx:method name="disprove" result="onDisproveSuccess(event);" />
		</mx:RemoteObject>
		<mx:Consumer id="clueConsumer" destination="clue-jms-destination"
			message="onClueMessage(event);" fault="defaultMessageFaultHandler(event);" />
	</fx:Declarations>
	<!-- Telling someone to pick a game -->
	<!-- Main scene container. -->
	<s:VGroup id="clueContainer" width="100%" height="100%"
		includeIn="clueGroup" enabled.prestart="false" enabled.proposition="false">
		<s:filters>
			<s:ColorMatrixFilter
				matrix="[1,0,0,0,-50,
					  	 0,1,0,0,-50,
					  	 0,0,1,0,-50,
					  	 0,0,0,1,0]"
				includeIn="prestart" />
			<s:BlurFilter blurX="10" blurY="10" includeIn="prestart" />
		</s:filters>
		<!-- Cards and rooms. -->
		<s:HGroup width="100%" height="100%">
			<!-- <s:List dataProvider="{myCardNames}" height="100%" itemRenderer="clue.components.renderers.CardRenderer" 
				/> -->
			<clue-components:CardSidebar id="cardSidebar"
				cardNames="{myCardNames}" skinClass="clue.components.CardSidebarSkin"
				disprove="onDisprove(event);" height="100%" />
			<clue-components:Board skinClass="clue.components.BoardSkin"
				width="100%" height="100%" moveRequested="trace(event);trace((event as MoveRequested).toRoom.room)">
				<clue-components:rooms>
					<mx:ArrayCollection>
						<clue-components:Room room="Kitchen"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.KITCHEN}" />
						<clue-components:Room room="Ballroom"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.BALLROOM}" />
						<clue-components:Room room="Conservatory"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.CONSERVATORY}" />
						<clue-components:Room room="Dining Room"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.DINING_ROOM}" />
						<clue-components:Room room="Billiard Room"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.BILLIARD_ROOM}" />
						<clue-components:Room room="Library"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.LIBRARY}" />
						<clue-components:Room room="Lounge"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.LOUNGE}" />
						<clue-components:Room room="Hall"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.HALL}" />
						<clue-components:Room room="Study"
							skinClass="clue.components.RoomSkin" players="{currentPlayers.STUDY}" />
					</mx:ArrayCollection>
				</clue-components:rooms>
			</clue-components:Board>
		</s:HGroup>
		<s:HGroup width="100%">
			<s:Panel id="chatPanel" title="Chat" width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout paddingLeft="10" paddingRight="10"
						paddingTop="10" paddingBottom="10" />
				</s:layout>
				<s:TextArea id="chat" width="100%" />
				<s:HGroup width="100%">
					<s:TextInput id="chatInput" width="100%" height="40"
						fontSize="32" />
					<mx:Button width="40" height="40" label="Chat"
						icon="@Embed(source='../resources/speech_icon.png')"
						click="blazeDSClueService.chat(key,gameId,chatInput.text);chatInput.text='';" />
				</s:HGroup>
			</s:Panel>
			<s:VGroup height="100%">
				<s:Button id="btnSuggest" label="Suggest" fontSize="20"
					width="100%" height="100%" click="currentState='suggest';" />
				<s:Button id="btnAccuse" label="Accuse" fontSize="20"
					width="100%" height="100%" click="currentState='accuse';" />
				<s:Button id="btnEndTurn" label="End Turn" fontSize="20"
					width="100%" height="100%" click="blazeDSClueService.endTurn(key,gameId);" />
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
	<!-- Proposition -->
	<clue-components:Proposition id="proposition"
		includeIn="proposition" skinClass="clue.components.PropositionSkin"
		propositionCanceled="onCancelProposition(event);" propositionMade="onMakeProposition(event);"
		verticalCenter="0" horizontalCenter="0" roomCardNames="{roomCards}"
		suspectCardNames="{suspectCards}" weaponCardNames="{weaponCards}">
		<clue-components:filters>
			<s:DropShadowFilter />
		</clue-components:filters>
	</clue-components:Proposition>
	<!-- Telling someone to login -->
	<s:Group id="beforeStartContainer" includeIn="login,games,prestart"
		width="100%" height="100%">
		<s:filters>
			<s:DropShadowFilter />
		</s:filters>
		<s:Group id="beforeStartRectContainer" verticalCenter="0"
			horizontalCenter="0">
			<s:Rect id="beforeStartRect" radiusX="10" radiusY="10" width="100%"
				height="100%">
				<s:fill>
					<s:SolidColor color="#dddddd" />
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#bbbbbb" weight="10" />
				</s:stroke>
			</s:Rect>
			<s:VGroup paddingLeft="50" paddingRight="50" paddingTop="50"
				paddingBottom="50" width="100%" horizontalAlign="center">
				<s:Label id="beforeStartText" text.login="Please login before continuing."
					text.games="Please select a game to join."
					text.prestart="Once you have enough players, click the Start button below to start the game. ({playerCount}/3 players)." />
				<s:Button label="Start" includeIn="prestart"
					click="blazeDSClueService.startGame();" id="btnStart" enabled="{playerCount>=3}" />
			</s:VGroup>
		</s:Group>
	</s:Group>
</s:Application>