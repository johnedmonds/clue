<?xml version="1.0" encoding="UTF-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:clue-components="clue.components.*" width="100%" height="100%"
	creationComplete="initApp();">
	<s:states>
		<s:State name="login" />
		<s:State name="games" />
		<s:State name="prestart" stateGroups="clueGroup" />
		<s:State name="clue" stateGroups="clueGroup" />
		<s:State name="accuse" stateGroups="clueGroup,proposition" />
		<s:State name="suggest" stateGroups="clueGroup,proposition" />
	</s:states>
	<s:transitions>
		<s:Transition fromState="*" toState="*">
			<s:Parallel>
				<s:Resize targets="{[beforeStartRect]}" duration="1000" />
				<s:Move
					targets="{[beforeStartRect,beforeStartRectContainer,beforeStartContainer]}"
					duration="1000" />
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	<fx:Script>
	<![CDATA[
		import mx.rpc.remoting.mxml.RemoteObject;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.AsyncToken;
		import mx.rpc.IResponder;
		import mx.messaging.events.MessageFaultEvent;
		import mx.messaging.events.MessageEvent;
		import mx.utils.*;
		import mx.collections.*;
		import messages.*;
		import clue.components.*;
		import clue.events.*;
		import clue.*;
		
		private var key:String;
		private var username:String;
		private var suspect:String;
		private var gameId:int;
		private const allCards:Array=["DAGGER", "CANDLESTICK", "REVOLVER", "ROPE", "LEAD_PIPE", "SPANNER", "SCARLETT", "MUSTARD", "WHITE", "GREEN", "PEACOCK", "PLUM", "KITCHEN", "BALLROOM", "CONSERVATORY", "DINING_ROOM", "BILLIARD_ROOM", "LIBRARY", "LOUNGE", "HALL", "STUDY"];
		[Bindable]private var roomCards:ArrayCollection;
		[Bindable]private var suspectCards:ArrayCollection;
		[Bindable]private var weaponCards:ArrayCollection;
		[Bindable]private var playerCount:int=0;
		[Bindable]private var displayedMessageLog:ArrayCollection=new ArrayCollection();
		
		[Bindable]private var currentPlayers:ObjectProxy=new ObjectProxy({
		KITCHEN:new ArrayCollection(),
		BALLROOM:new ArrayCollection(),
		CONSERVATORY:new ArrayCollection(),
		DINING_ROOM:new ArrayCollection(),
		BILLIARD_ROOM:new ArrayCollection(),
		LIBRARY:new ArrayCollection(),
		LOUNGE:new ArrayCollection(),
		HALL:new ArrayCollection(),
		STUDY:new ArrayCollection()});
		//Instead of storing players the correct way (i.e. a map of player name->Player), we just search the rooms for the player.
		//Luckily it's not that bad.  Worst case: all players are in the study and the player we want was the last player to move to the study.  This would be ((8 rooms with no one)*1)+((the study)*(6 players))= 8*1+1*6 = 8+6 = 14 operations.  That is O(14), which is O(1).  So if you think about it, the worst case actually takes constant time :) .
		private function getPlayerByName(playerName:String):Player{for each (var i:ArrayCollection in currentPlayers){for each (var p:Player in i){if(p.playerName==playerName){return p}}}return null;}
		private function roomContainsPlayerByName(playerList:ArrayCollection,playerName:String):Boolean{for each(var p:Player in playerList){if (p.playerName==playerName)return true;}return false;}
		private function roomByNameContainsPlayerByName(roomName:String,playerName:String):Boolean{return roomContainsPlayerByName(currentPlayers[roomName],playerName);}
		[ArrayElementType("String")] [Bindable]private var myCardNames:ArrayCollection;
		//Handlers
		private function defaultServiceResultHandler(event:ResultEvent):void{}
		private function defaultServiceFaultHandler(event:FaultEvent):void{}
		private function defaultMessageFaultHandler(event:MessageFaultEvent):void{}
		
		private function logout():void{
			key=null;
			username=null;
			clientLeave();
			currentState="login";
		}
		private function clientLeave():void{
			currentState="games";
			playerCount=0;
			chatInput.text="";
			clueConsumer.unsubscribe();
			displayedMessageLog=new ArrayCollection();
			//Clear the rooms.
			for (var room:String in currentPlayers)currentPlayers[room]=new ArrayCollection();
			myCardNames=new ArrayCollection();
		}
		private function leaveSuccess(event:ResultEvent):void{
			clientLeave();
			ExternalInterface.call("leave");
		}
		private function successfulLogin(usernamein:String, keyin:String):void{username=usernamein;key=keyin;currentState="games";}
		private function join(suspectin:String,gameIdIn:int):void{gameId=gameIdIn;suspect=suspectin;blazeDSClueService.join(key,gameId,suspect);}
		private function rejoin(gameIdIn:int):void{gameId=gameIdIn;blazeDSClueService.associate(key,gameIdIn);}
		private function rejoinSuccess(event:ResultEvent):void{
			suspect=event.result as String;
			currentState="prestart";
			clueConsumer.subscribe();
			blazeDSClueService.getStatus(gameId).marker="rejoin";
		}
		private function joinSuccess(event:ResultEvent):void{
			currentState="prestart";
			clueConsumer.subscribe();
			blazeDSClueService.getStatus(gameId);
		}
		private function onGetStatus(event:ResultEvent):void{
			var gameData:GameData = event.result as GameData;
			for (var s:String in currentPlayers)currentPlayers[s]=new ArrayCollection();
			for each (var p:Player in gameData.players) {
				p.setStyle("skinClass",PlayerSkin);
				playerCount+=1;
				currentPlayers[Board.getSuspectStartingRoom(p.suspect)].addItem(p);
			}
			if((event.token as AsyncToken).marker=="rejoin")blazeDSClueService.getAllUpdates(key,gameId);
		}
		private function onStartGameResult(event:ResultEvent):void{currentState="clue";}
		
		private function onClueMessage(event:MessageEvent):void{onClueMessageHelper(event.message.body as Message);}
		private function onClueMessageHelper(message:Message):void{
			if (message is messages.Join)onJoinMessage(message as Join);
			else if (message is messages.Chat){}
			else if (message is messages.CardsMessage){onCardsMessage(message as CardsMessage);}
			else if (message is messages.Disprove){onDisproveMessage(message as Disprove);}
			else if (message is messages.NextTurn)onNextTurnMessage(message as NextTurn);
			else if (message is messages.MoveMessage)onMoveMessage(message as MoveMessage);
			else if (message is messages.Disprove){}
			else if (message is messages.DisprovingCard){}
			else if (message is messages.GameOver){}
			else if (message is messages.Leave){onLeaveMessage(message as Leave);}
			else if (message is messages.Suggestion){}
			else if (message is messages.Accusation){}
			
			addMessageToLog(message);
		}
		private function addMessageToLog(message:Message):void{
			const p:Player=message is PlayerMessage?getPlayerByName((message as PlayerMessage).player):null;
			const playerColor:SolidColor=p==null?new SolidColor():p.suspectColor;
			displayedMessageLog.addItem(new MessageEntry(message.toString(),message.getIcon(),playerColor));
			if(chat.scroller!=null)callLater(function():void{chat.scroller.verticalScrollBar.value=chat.scroller.verticalScrollBar.maximum},[]);
		}
		private function onJoinMessage(join:Join):void{
			trace("join player count: " + playerCount);
			playerCount+=1;
			var p:Player=new Player(join.player,join.suspect);
			p.setStyle("skinClass",PlayerSkin);
			currentPlayers[Board.getSuspectStartingRoom(p.suspect)].addItem(p);
		}
		private function onDisproveMessage(disprove:Disprove):void{if(disprove.player==username)cardSidebar.isDisproving=true;}
		private function onDisprove(event:DisproveEvent):void{blazeDSClueService.disprove(key,gameId,event.card);}
		private function onDisproveSuccess(event:ResultEvent):void{cardSidebar.isDisproving=false;}
			
		private function onCardsMessage(cards:CardsMessage):void{
			myCardNames=new ArrayCollection(cards.cards);
			currentState="clue";
		}
		private function initApp():void{
			roomCards=new ArrayCollection(allCards);
			suspectCards=new ArrayCollection(allCards);
			weaponCards=new ArrayCollection(allCards);
			roomCards.filterFunction=Proposition.isRoom;
			suspectCards.filterFunction=Proposition.isSuspect;
			weaponCards.filterFunction=Proposition.isWeapon;
			roomCards.refresh();
			suspectCards.refresh();
			weaponCards.refresh();
			ExternalInterface.addCallback("successfulLogin",successfulLogin);
			ExternalInterface.addCallback("logout",logout);
			ExternalInterface.addCallback("join",join);
			ExternalInterface.addCallback("rejoin",rejoin);
			ExternalInterface.call("clueFinishedLoading");
		}
		private function onMakeProposition(event:PropositionMadeEvent):void{
			if (currentState=="suggest")blazeDSClueService.suggest(proposition.suspect,proposition.weapon);
			else if (currentState=="accuse")blazeDSClueService.accuse(proposition.room,proposition.suspect,proposition.weapon);
		}
		private function onProposeSuccess(event:ResultEvent):void{
			if(currentState=="suggest")btnSuggest.enabled=false;
			else if(currentState=="accuse")btnAccuse.enabled=false;
			currentState="clue";
		}
		private function onCancelProposition(event:Event):void{
			currentState="clue";
		}
		private function onEndTurn(event:ResultEvent):void{btnSuggest.enabled=btnAccuse.enabled=btnEndTurn.enabled=false;}
		private function onNextTurnMessage(nextTurn:NextTurn):void{btnSuggest.enabled=btnAccuse.enabled=btnEndTurn.enabled=(nextTurn.player==this.username);}
		private function movePlayer(toRoom:String):void{blazeDSClueService.movePlayer(key,gameId,toRoom);}
		private function getPlayerInRoom(playerName:String,room:ArrayCollection):Player{for each (var p:Player in room)if(p.playerName==playerName)return p;return null;} 
		private function onMoveMessage(move:MoveMessage):void{
			const p:Player=getPlayerInRoom(move.player,currentPlayers[move.from]);
			currentPlayers[move.from].removeItemAt(currentPlayers[move.from].getItemIndex(p));
			currentPlayers[move.to].addItem(p);
		}
		private function getRoomForPlayer(p:Player):String{for(var ac:String in currentPlayers){if (currentPlayers[ac].contains(p))return ac;}return null;}
		private function onLeaveMessage(leave:Leave):void{
			trace("Leave player count: " + playerCount);
			//Players who leave during the game should still be visible.
			if(currentState=="prestart"){
				const p:Player=getPlayerByName(leave.player);
				const room:String=getRoomForPlayer(p);
				currentPlayers[room].removeItemAt(currentPlayers[room].getItemIndex(p));
				playerCount-=1;
			}
		}
		private function onGetAllUpdates(event:ResultEvent):void{
			var gameHasStarted:Boolean=false;
			for each (var m:Message in event.result){
				//Receiving the cards message means the game has started.
				if (m is CardsMessage)gameHasStarted=true;
				//Once the game has started, the messages start to make a difference in the state of the game beyond what can be retrieved by getStatus.
				//Also note that onClueMessageHelper calls addMessageToLog for us.  We only have to do it here if we don't call onClueMessageHelper, which would be in the case where the game has not yet started.
				if (gameHasStarted)onClueMessageHelper(m);
				else addMessageToLog(m);
			}
		}
		private function onUserChat():void{blazeDSClueService.chat(key,gameId,chatInput.text);chatInput.text='';}
	]]>
	</fx:Script>
	<fx:Declarations>
		<mx:RemoteObject id="blazeDSClueService" destination="BlazeDSClueService"
			result="defaultServiceResultHandler(event);" fault="defaultServiceFaultHandler(event);">
			<mx:method name="join" result="joinSuccess(event);" />
			<mx:method name="associate" result="rejoinSuccess(event);" />
			<mx:method name="getStatus" result="onGetStatus(event);" />
			<mx:method name="startGame" result="onStartGameResult(event);" />
			<mx:method name="suggest" result="onProposeSuccess(event);" />
			<mx:method name="accuse" result="onProposeSuccess(event);" />
			<mx:method name="endTurn" result="onEndTurn(event);" />
			<mx:method name="disprove" result="onDisproveSuccess(event);" />
			<mx:method name="movePlayer" />
			<mx:method name="getAllUpdates" result="onGetAllUpdates(event);" />
			<mx:method name="leave" result="leaveSuccess(event);" />
		</mx:RemoteObject>
		<mx:Consumer id="clueConsumer" destination="clue-jms-destination"
			message="onClueMessage(event);" fault="defaultMessageFaultHandler(event);" />
	</fx:Declarations>
	<!-- Main scene container. -->
	<s:VGroup id="clueContainer" width="100%" height="100%"
		includeIn="clueGroup" enabled.proposition="false">
		<!-- Cards and rooms. -->
		<s:HGroup width="100%">
			<clue-components:CardSidebar id="cardSidebar"
				cardNames="{myCardNames}" skinClass="clue.components.CardSidebarSkin"
				disprove="onDisprove(event);" height="100%" />
			<clue-components:Board skinClass="clue.components.BoardSkin"
				width="100%" moveRequested="movePlayer((event as MoveRequested).toRoom.room);"
				rooms="{currentPlayers}" />
		</s:HGroup>
		<!-- Status Bar -->
		<s:Group width="100%" includeIn="prestart">
			<s:Rect width="100%" height="100%" radiusX="5" radiusY="5">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="0xeeeeee" />
						<s:GradientEntry color="0xbbbbbb" />
					</s:LinearGradient>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="0xaaaaaa" weight="2" />
				</s:stroke>
			</s:Rect>
			<s:HGroup width="100%" verticalAlign="middle" paddingLeft="5"
				paddingRight="5" paddingTop="5" paddingBottom="5">
				<s:Label includeIn="prestart"
					text="Once you have enough players, click 'Start' to begin the game. ({playerCount}/3 players)" />
				<s:Button label="Start" includeIn="prestart"
					click="blazeDSClueService.startGame();" id="btnStart" enabled="{playerCount>=3}" />
			</s:HGroup>
		</s:Group>
		<!-- Chat and buttons -->
		<s:HGroup width="100%" height="100%">
			<s:Panel id="chatPanel" title="Chat" width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout paddingLeft="10" paddingRight="10"
						paddingTop="10" paddingBottom="10" />
				</s:layout>
				<s:List id="chat" dataProvider="{displayedMessageLog}" width="100%"
					height="100%" itemRenderer="clue.components.renderers.MessageRenderer" />
				<s:HGroup width="100%">
					<s:TextInput id="chatInput" width="100%" height="40"
						fontSize="32" enter="onUserChat();" />
					<mx:Button width="40" height="40" label="Chat"
						icon="@Embed(source='../resources/chat.png')" click="onUserChat();" />
				</s:HGroup>
			</s:Panel>
			<s:VGroup height="100%">
				<s:Button id="btnSuggest" label="Suggest" fontSize="20"
					width="100%" height="100%" enabled="false" click="currentState='suggest';" />
				<s:Button id="btnAccuse" label="Accuse" enabled="false"
					fontSize="20" width="100%" height="100%" click="currentState='accuse';" />
				<s:Button id="btnEndTurn" label="End Turn" enabled="false"
					fontSize="20" width="100%" height="100%"
					click="blazeDSClueService.endTurn(key,gameId);" />
				<s:Button id="btnLeave" label="Leave" width="100%"
					click="blazeDSClueService.leave(key,gameId);" />
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
	<!-- Proposition -->
	<clue-components:Proposition id="proposition"
		includeIn="proposition" skinClass="clue.components.PropositionSkin"
		propositionCanceled="onCancelProposition(event);" propositionMade="onMakeProposition(event);"
		verticalCenter="0" horizontalCenter="0" roomCardNames="{roomCards}"
		suspectCardNames="{suspectCards}" weaponCardNames="{weaponCards}">
		<clue-components:filters>
			<s:DropShadowFilter />
		</clue-components:filters>
	</clue-components:Proposition>
	<!-- Telling someone to login -->
	<s:Group id="beforeStartContainer" includeIn="login,games"
		width="100%" height="100%">
		<s:filters>
			<s:DropShadowFilter />
		</s:filters>
		<s:Group id="beforeStartRectContainer" verticalCenter="0"
			horizontalCenter="0">
			<s:Rect id="beforeStartRect" radiusX="10" radiusY="10" width="100%"
				height="100%">
				<s:fill>
					<s:SolidColor color="#dddddd" />
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#bbbbbb" weight="10" />
				</s:stroke>
			</s:Rect>
			<s:VGroup paddingLeft="50" paddingRight="50" paddingTop="50"
				paddingBottom="50">
				<s:Label id="beforeStartText" text.login="Please login before continuing."
					text.games="Please select a game to join." />
			</s:VGroup>
		</s:Group>
	</s:Group>
</s:Application>