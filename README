In order to install clue, you will need Maven.
Although Maven will be able to download almost everything, it will not be able to download javax.jms which is required to compile (though it should be provided by your container.)
You will need to download the specification jar and then install it with maven using
maven install:install-file -Dfile=javax.jms.jar -DartifactId=jms -DgroupId=javax.jms -Dpackaging=jar -Dversion=1.1

We also use JNDI for looking up the JMS connection factory and topic.
We use ActiveMQ during the testing phase but, in theory, you may use anything you want.  In order to set it up in Tomcat (5.5+), you will need to edit context.xml and add
<Resource name="clue/jms/clue-broker" auth="Container" type="org.apache.activemq.ActiveMQConnectionFactory" description="Clue JMS connection factory." factory="org.apache.activemq.jndi.JNDIReferenceFactory" brokerURL="vm://clue-broker" brokerName="ClueBroker"/>
<Resource name="clue/jms/clue-topic" auth="Container" type="org.apache.activemq.command.ActiveMQTopic" description="Clue JMS topic" factory="org.apache.activemq.jndi.JNDIReferenceFactory" physicalName="clue-topic"/>

You may change the JNDI names by editing service-locations.properties.  There is one instance of this file per application in Clue.  This will allow the different modules to point to different locations.  This file will also allow you to point to different services.

You need to add clue-service-client.jar to the share library folder. It is not compiled into any of the other things.  This is because if we use the vm:// style for brokers, they will not do the object serialization and deserialization.  Instead they will simply pass objects around directly as messages.  This improves performance a lot, however, if we have multiple instances of clue-service-client.jar loaded (one per application), the JVM will not be able to tell that a message is actually of the correct type.  If we were able to instantiate an ActiveMQ broker and then connect to it with tcp, we would not have the problem because it won't matter that there are multiple classes of type com.pocketcookies.clue.message.broadcast.Message loaded.  They will simply deserialize the message and not be able to tell the difference.  In other words, we could compile the class in if we were using an external broker.
Since we're not, you will need to place the clue-service-client jar in the shared library directory.